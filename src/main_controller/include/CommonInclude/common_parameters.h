#ifndef COMMON_PARAMETERS
#define COMMON_PARAMETERS

#include <eigen3/Eigen/Dense>

using namespace Eigen;

float pi = 3.1415926;

typedef struct legState{
    // Servo angles for each arm
    float arm_angle_1 = 0.0;
    float arm_angle_2 = 0.0;
    float arm_angle_3 = 0.0;
    // Cast shadow leg length
    float cast_shadow_length = 0.1;
}legState; 

namespace Tail{

// The height of Spider body
float SUPPORT_HEIGHT = 0.1;

// Initial serovo angles for each arm
float ARM_ANGLES_1[3] = {0.0, pi/4, pi/4};
float ARM_ANGLES_2[3] = {0.0, 0.0, 0.0};
float ARM_ANGLES_3[3] = {0.0, 0.0, 0.0};
float ARM_ANGLES_4[3] = {0.0, 0.0, 0.0};
float ARM_ANGLES_5[3] = {0.0, 0.0, 0.0};
float ARM_ANGLES_6[3] = {0.0, 0.0, 0.0};

// Initial physical parameters about the mechanical design
float ARM_LENGTH_1 = 1.0;
float ARM_LENGTH_2 = 1.414;
float ARM_LENGTH_3 = 2.828;

// Max forward distance.
float MAX_FORWARD_DISTANCE = 100;

// LIFT_ANGLE would add on arm_angle_2 when lifting
float LIFT_ANGLE = pi/6;


// Initialize Connection points' coordinate & Touching points' coordinate
Vector2f C1 = Vector2f(-1, 1.732);
Vector2f C2 = Vector2f(1, 1.732);
Vector2f C3 = Vector2f(2, 0);
Vector2f C4 = Vector2f(1, -1.732);
Vector2f C5 = Vector2f(-1, -1.732);
Vector2f C6 = Vector2f(-2, 0);

Vector2f T1 = Vector2f(-3, 3);
Vector2f T2 = Vector2f(3, 3);
Vector2f T3 = Vector2f(4, 0);
Vector2f T4 = Vector2f(3, -3);
Vector2f T5 = Vector2f(-3, -3);
Vector2f T6 = Vector2f(-4, 0);

// Full orientation reference of max_delta_f
float FO_LIB[361] = {1.84568,1.83355,1.81829,1.80617,1.79438,1.78234,1.76781,1.7578,1.74425,1.7319,1.7187,1.70934,1.69697,1.69082,1.6852,1.67623,1.66685,1.65935,1.65501,1.6456,1.63733,1.63317,1.6282,1.61977,1.61547,1.61229,1.61034,1.60605,1.60322,1.60224,1.59989,1.59857,1.59758,1.59634,1.59452,1.59336,1.59452,1.59434,1.59463,1.59592,1.59614,1.59823,1.59978,1.60155,1.60274,1.60241,1.60922,1.61228,1.61624,1.61935,1.6235,1.63115,1.63954,1.64332,1.65116,1.65512,1.66087,1.67127,1.67949,1.68904,1.69503,1.70947,1.71832,1.72677,1.73698,1.75548,1.76888,1.77874,1.7918,1.80428,1.82219,1.83587,1.85171,1.86363,1.8812,1.90066,1.91988,1.93721,1.9568,1.97559,1.99714,2.01731,2.044,2.06463,2.0882,2.10882,2.13516,2.16512,2.1959,2.22288,2.25214,2.22306,2.19581,2.16545,2.13555,2.10725,2.08875,2.06534,2.04186,2.01915,1.99869,1.97437,1.9558,1.93617,1.921,1.901,1.88212,1.86609,1.84852,1.83133,1.81445,1.80073,1.78672,1.77522,1.76202,1.7524,1.74388,1.72955,1.71544,1.70934,1.70064,1.69087,1.6842,1.67151,1.66294,1.65432,1.64662,1.6403,1.63664,1.63294,1.6267,1.62248,1.61406,1.61249,1.60952,1.60458,1.60344,1.59783,1.59727,1.59578,1.5944,1.59405,1.59334,1.59326,1.59087,1.59068,1.59076,1.59145,1.59179,1.5943,1.59506,1.59553,1.60126,1.60325,1.60505,1.60995,1.6138,1.62433,1.62807,1.63217,1.63498,1.63864,1.64591,1.66125,1.67076,1.67728,1.68452,1.69376,1.70026,1.70938,1.72266,1.73419,1.7441,1.75587,1.76568,1.77768,1.78902,1.80243,1.81993,1.83438,1.85277,1.83523,1.8204,1.80379,1.78837,1.77797,1.765,1.757,1.74413,1.7326,1.71943,1.70985,1.70168,1.69488,1.68626,1.67609,1.6654,1.6613,1.64878,1.64202,1.63571,1.63021,1.62637,1.62145,1.61846,1.61496,1.61326,1.6079,1.60412,1.60256,1.60102,1.59664,1.59577,1.59506,1.59391,1.59238,1.59192,1.59278,1.5943,1.59531,1.59653,1.5968,1.59849,1.5994,1.60066,1.60645,1.60945,1.6136,1.61731,1.61929,1.62816,1.63283,1.63784,1.64397,1.6493,1.65709,1.66634,1.67077,1.67801,1.68933,1.69896,1.70743,1.71683,1.72878,1.73916,1.75417,1.76389,1.77719,1.79278,1.80519,1.81696,1.83107,1.84977,1.86225,1.885,1.90013,1.91988,1.93927,1.95815,1.97815,1.99751,2.01714,2.0399,2.06282,2.08764,2.11521,2.1401,2.16194,2.19061,2.22099,2.24744,2.22062,2.18908,2.16418,2.14129,2.11403,2.08676,2.06341,2.0395,2.02092,1.99639,1.97613,1.95749,1.94042,1.91816,1.90335,1.88357,1.86326,1.84825,1.8329,1.81753,1.80504,1.79246,1.78008,1.76492,1.75243,1.7395,1.73117,1.71846,1.70962,1.7,1.68964,1.68349,1.67209,1.66559,1.65762,1.65081,1.64225,1.63194,1.62915,1.62256,1.61911,1.61653,1.61074,1.60755,1.60438,1.60275,1.5991,1.59711,1.59467,1.59104,1.59051,1.58994,1.58988,1.58987,1.5907,1.59082,1.59138,1.59227,1.59407,1.59733,1.59909,1.60191,1.60391,1.60937,1.612,1.61903,1.62172,1.62619,1.63088,1.63594,1.64513,1.65561,1.66135,1.66456,1.67438,1.67996,1.69233,1.70121,1.71069,1.7199,1.73513,1.74656,1.75702,1.7671,1.78235,1.79402,1.80637,1.81943,1.83373,1.84566};

// Minimum velocity rate
float MIN_VELOCITY_RATE = 0.05;




}
#endif